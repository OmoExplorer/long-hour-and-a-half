/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package longHourAndAHalf.ui

import longHourAndAHalf.Wear
import longHourAndAHalf.WearType.*
import java.awt.event.ActionEvent
import java.io.*
import javax.swing.*
import javax.swing.GroupLayout.Alignment
import javax.swing.LayoutStyle.ComponentPlacement
import javax.swing.filechooser.FileFilter

/**
 * @author JavaBird
 */
class WearEditor : javax.swing.JFrame() {
    internal var fc = JFileChooser()
    internal var wear: Wear? = null
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var absorptionLabel: JLabel? = null
    private var absorptionSpinner: JSpinner? = null
    private var dotLabel: JLabel? = null
    private var dotSpinner: JSpinner? = null
    private var insertNameField: JTextField? = null
    private var insertNameLabel: JLabel? = null
    private var nameField: JTextField? = null
    private var nameLabel: JLabel? = null
    private var openButton: JButton? = null
    private var pressureLabel: JLabel? = null
    private var pressureSpinner: JSpinner? = null
    private var saveButton: JButton? = null
    private var typeComboBox: JComboBox<String>? = null
    private var typeLabel: JLabel? = null

    /**
     * Creates new form WearEditor
     */
    init {
        //        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fc.fileFilter = object : FileFilter() {
            override fun accept(pathname: File): Boolean {
                var extension = ""
                val i = pathname.name.lastIndexOf('.')
                if (i > 0) {
                    extension = pathname.name.substring(i + 1)
                }
                return extension == "lhhwear"
            }

            override fun getDescription(): String {
                return "A Long Hour and a Half Custom wear"
            }
        }

        this.initComponents()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    fun initComponents() {

        this.nameLabel = JLabel()
        this.nameField = JTextField()
        this.typeLabel = JLabel()
        this.typeComboBox = JComboBox()
        this.pressureLabel = JLabel()
        this.pressureSpinner = JSpinner()
        this.absorptionLabel = JLabel()
        this.absorptionSpinner = JSpinner()
        this.dotLabel = JLabel()
        this.dotSpinner = JSpinner()
        this.saveButton = JButton()
        this.openButton = JButton()
        this.insertNameLabel = JLabel()
        this.insertNameField = JTextField()

        this.defaultCloseOperation = WindowConstants.DISPOSE_ON_CLOSE
        this.title = "Wear editor"

        this.nameLabel!!.text = "Wear name"
        this.nameLabel!!.toolTipText = "Your wear name (e. g. \"Beautiful skirt\")"
        this.nameLabel!!.name = "nameLabel" // NOI18N

        this.nameField!!.toolTipText = "Your wear name (e. g. \"Beautiful skirt\")"
        this.nameField!!.name = "nameField" // NOI18N

        this.typeLabel!!.text = "Wear type"
        this.typeLabel!!.toolTipText = "Type of your wear: undies or lower."
        this.typeLabel!!.name = "typeLabel" // NOI18N

        this.typeComboBox!!.model = DefaultComboBoxModel(arrayOf("Underwear", "Outerwear", "Both are suitable"))
        this.typeComboBox!!.selectedIndex = 2
        this.typeComboBox!!.name = "typeComboBox" // NOI18N

        this.pressureLabel!!.text = "Pressure"
        this.pressureLabel!!.toolTipText = "<html>\nDecreases the maximal fullness capacity.<br>\n<b>1 point = -1% of max. fullness capacity.</b>\n</html>"
        this.pressureLabel!!.name = "pressureLabel" // NOI18N

        this.pressureSpinner!!.model = SpinnerNumberModel(java.lang.Float.valueOf(0.0f), java.lang.Float.valueOf(0.0f), java.lang.Float.valueOf(300.0f), java.lang.Float.valueOf(1.0f))
        this.pressureSpinner!!.toolTipText = "<html> Decreases the maximal fullness capacity.<br> <b>1 point = -1% of max. fullness capacity.</b> </html>"
        this.pressureSpinner!!.name = "pressureSpinner" // NOI18N

        this.absorptionLabel!!.text = "Absorption"
        this.absorptionLabel!!.toolTipText = "<html>\nAbsorbs the leaked pee.<br>\n<b>1 point = 0.5% of pee.</b>\n</html>\n"
        this.absorptionLabel!!.name = "absorptionLabel" // NOI18N

        this.absorptionSpinner!!.model = SpinnerNumberModel(java.lang.Float.valueOf(0.0f), java.lang.Float.valueOf(0.0f), java.lang.Float.valueOf(300.0f), java.lang.Float.valueOf(1.0f))
        this.absorptionSpinner!!.toolTipText = "<html> Absorbs the leaked pee.<br> <b>1 point = 0.5% of pee.</b> </html> "
        this.absorptionSpinner!!.name = "absorptionSpinner" // NOI18N

        this.dotLabel!!.text = "Drying over time"
        this.dotLabel!!.toolTipText = "<html>\nSpeed of wear drying.<br>\n<b>1 point = -1% of absorbed pee per 3 minutes.</b>\n</html>"
        this.dotLabel!!.name = "dotLabel" // NOI18N

        this.dotSpinner!!.model = SpinnerNumberModel(java.lang.Float.valueOf(0.0f), java.lang.Float.valueOf(0.0f), java.lang.Float.valueOf(100.0f), java.lang.Float.valueOf(1.0f))
        this.dotSpinner!!.toolTipText = "<html> Speed of wear drying.<br> <b>1 point = -1% of absorbed pee per 3 minutes.</b> </html>"
        this.dotSpinner!!.name = "dotSpinner" // NOI18N

        this.saveButton!!.text = "Save..."
        this.saveButton!!.name = "saveButton" // NOI18N
        this.saveButton!!.addActionListener { evt -> this@WearEditor.saveButtonActionPerformed(evt) }

        this.openButton!!.text = "Open..."
        this.openButton!!.name = "openButton" // NOI18N
        this.openButton!!.addActionListener { evt -> this@WearEditor.openButtonActionPerformed(evt) }

        this.insertNameLabel!!.text = "Wear insert name"
        this.insertNameLabel!!.toolTipText = "Your wear name which is inserted in the core text (e. g. \"skirt\")"
        this.insertNameLabel!!.name = "insertNameLabel" // NOI18N

        this.insertNameField!!.toolTipText = "Your wear name which is inserted in the core text (e. g. \"skirt\")"
        this.insertNameField!!.name = "insertNameField" // NOI18N

        val layout = GroupLayout(this.contentPane)
        this.contentPane.layout = layout
        layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(this.nameLabel)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(this.nameField!!, GroupLayout.PREFERRED_SIZE, 166, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(this.insertNameLabel)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(this.insertNameField)
                                        .addContainerGap())
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(this.typeLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(this.typeComboBox!!, 0, GroupLayout.DEFAULT_SIZE, java.lang.Short.MAX_VALUE.toInt()))
                                .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, java.lang.Short.MAX_VALUE.toInt())
                                        .addComponent(this.pressureLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(this.pressureSpinner!!, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.UNRELATED)
                                        .addComponent(this.absorptionLabel)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(this.absorptionSpinner!!, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.UNRELATED)
                                        .addComponent(this.dotLabel)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(this.dotSpinner!!, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(this.saveButton!!, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, java.lang.Short.MAX_VALUE.toInt())
                                        .addComponent(this.openButton!!, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))))
        )
        layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(this.nameLabel)
                                .addComponent(this.nameField!!, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(this.insertNameLabel)
                                .addComponent(this.insertNameField!!, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(this.typeLabel)
                                .addComponent(this.typeComboBox!!, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(this.pressureLabel)
                                .addComponent(this.pressureSpinner!!, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(this.absorptionLabel)
                                .addComponent(this.absorptionSpinner!!, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(this.dotLabel)
                                .addComponent(this.dotSpinner!!, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(this.saveButton)
                                .addComponent(this.openButton))
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, java.lang.Short.MAX_VALUE.toInt()))
        )

        this.pack()
    }// </editor-fold>//GEN-END:initComponents

    private fun saveButtonActionPerformed(evt: ActionEvent)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        this.fc.selectedFile = File(this.nameField!!.text)
        if (this.fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            val file = File(this.fc.selectedFile.absolutePath + ".lhhwear")
            val fout: FileOutputStream
            val oos: ObjectOutputStream
            try {
                this.wear = Wear(this.nameField!!.text, this.insertNameField!!.text, this.pressureSpinner!!.value as Double, this.absorptionSpinner!!.value as Double, this.dotSpinner!!.value as Double)
                when (this.typeComboBox!!.selectedIndex) {
                    0 -> this.wear!!.type = UNDERWEAR
                    1 -> this.wear!!.type = OUTERWEAR
                    2 -> this.wear!!.type = BOTH_SUITABLE
                }

                //                writer = new PrintStream(file);
                fout = FileOutputStream(file)
                oos = ObjectOutputStream(fout)
                oos.writeObject(this.wear)
            } catch (ex: IOException) {
                JOptionPane.showMessageDialog(this, "File error.", "Error", JOptionPane.ERROR_MESSAGE)
            }

        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private fun openButtonActionPerformed(evt: ActionEvent)//GEN-FIRST:event_openButtonActionPerformed
    {//GEN-HEADEREND:event_openButtonActionPerformed
        if (this.fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            val file = this.fc.selectedFile
            try {
                val fin = FileInputStream(file)
                val ois = ObjectInputStream(fin)
                this.wear = ois.readObject() as Wear
            } catch (e: IOException) {
                JOptionPane.showMessageDialog(this, "File error.", "Error", JOptionPane.ERROR_MESSAGE)
            } catch (e: ClassNotFoundException) {
                JOptionPane.showMessageDialog(this, "File error.", "Error", JOptionPane.ERROR_MESSAGE)
            }

            this.nameField!!.text = this.wear!!.name
            this.insertNameField!!.text = this.wear!!.insert
            this.pressureSpinner!!.value = this.wear!!.pressure
            this.absorptionSpinner!!.value = this.wear!!.absorption
            this.dotSpinner!!.value = this.wear!!.dryingOverTime

            when (this.wear!!.type) {
                UNDERWEAR -> this.typeComboBox!!.setSelectedIndex(0)
                OUTERWEAR -> this.typeComboBox!!.setSelectedIndex(1)
                BOTH_SUITABLE -> this.typeComboBox!!.setSelectedIndex(2)
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    companion object {

        private val serialVersionUID = 1L

        @JvmStatic
        fun main(args: Array<String>) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
            try {
                for (info in javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus" == info.name) {
                        javax.swing.UIManager.setLookAndFeel(info.className)
                        break
                    }
                }
            } catch (ex: ClassNotFoundException) {
            } catch (ex: IllegalAccessException) {
            } catch (ex: javax.swing.UnsupportedLookAndFeelException) {
            } catch (ex: InstantiationException) {
            }

            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater { WearEditor().isVisible = true }
        }
    }
    // End of variables declaration//GEN-END:variables
}
