package omo;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import omo.ALongHourAndAHalf.Gender;
import static omo.ALongHourAndAHalf.Gender.*;

/**
 *
 * @author JavaBird
 */
public class setupFramePre extends javax.swing.JFrame
{

    private static final long serialVersionUID = 1L;
    private String undiesColor = "Random";
    private String lowerColor = "Random";
    JFileChooser fcWear;
    JFileChooser fcGame;
    JFileChooser fcPreset;
    Save game;

    /**
     * Creates new form setupFrame
     */
    public setupFramePre()
    {
        fcWear = new JFileChooser();
        fcWear.setFileFilter(new FileFilter()
        {
            @Override
            public boolean accept(File f)
            {
                String extension = "";
                int i = f.getName().lastIndexOf('.');
                if (i > 0)
                {
                    extension = f.getName().substring(i + 1);
                }
                return extension.equals("lhhwear");
            }

            @Override
            public String getDescription()
            {
                return "A Long Hour and a Half Saved game";
            }
        });

        fcGame = new JFileChooser();
        fcGame.setFileFilter(new FileFilter()
        {
            @Override
            public boolean accept(File f)
            {
                String extension = "";
                int i = f.getName().lastIndexOf('.');
                if (i > 0)
                {
                    extension = f.getName().substring(i + 1);
                }
                return extension.equals("lhhsav");
            }

            @Override
            public String getDescription()
            {
                return "A Long Hour and a Half Saved game";
            }
        });
        
        fcPreset = new JFileChooser();
        fcPreset.setFileFilter(new FileFilter()
        {
            @Override
            public boolean accept(File f)
            {
                String extension = "";
                int i = f.getName().lastIndexOf('.');
                if (i > 0)
                {
                    extension = f.getName().substring(i + 1);
                }
                return extension.equals("lhhprst");
            }

            @Override
            public String getDescription()
            {
                return "A Long Hour and a Half Character preset";
            }
        });
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents()//GEN-BEGIN:initComponents
    {

        buttonGroup1 = new ButtonGroup();
        buttonGroup2 = new ButtonGroup();
        buttonGroup3 = new ButtonGroup();
        nameField = new JTextField();
        maleRadio = new JRadioButton();
        femaleRadio = new JRadioButton();
        difficultyPanel = new JPanel();
        normalDiffRadio = new JRadioButton();
        hardDiffRadio = new JRadioButton();
        incontLabel = new JLabel();
        incontSlider = new JSlider();
        bladAtStartLabel = new JLabel();
        basSlider = new JSlider();
        underwearLabel = new JLabel();
        outerwearLabel = new JLabel();
        start = new JButton();
        nameLabel = new JLabel();
        definedBasRadio = new JRadioButton();
        randomBasRadio = new JRadioButton();
        jScrollPane1 = new JScrollPane();
        underwearTree = new JTree();
        jScrollPane2 = new JScrollPane();
        outerwearTree = new JTree();
        jScrollPane3 = new JScrollPane();
        jTextPane1 = new JTextPane();
        undiesColor_black = new JPanel();
        undiesColor_gray = new JPanel();
        undiesColor_red = new JPanel();
        undiesColor_orange = new JPanel();
        undiesColor_yellow = new JPanel();
        undiesColor_green = new JPanel();
        undiesColor_blue = new JPanel();
        undiesColor_darkBlue = new JPanel();
        undiesColor_purple = new JPanel();
        undiesColor_pink = new JPanel();
        lowerColor_pink = new JPanel();
        lowerColor_black = new JPanel();
        lowerColor_gray = new JPanel();
        lowerColor_red = new JPanel();
        lowerColor_orange = new JPanel();
        lowerColor_yellow = new JPanel();
        lowerColor_green = new JPanel();
        lowerColor_blue = new JPanel();
        lowerColor_darkBlue = new JPanel();
        lowerColor_purple = new JPanel();
        undiesColor_random = new JPanel();
        lowerColor_random = new JPanel();
        wearEditorButton = new JButton();
        loadGame = new JButton();
        loadPreset = new JButton();
        savePreset = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        nameField.setText("Mrs. Nobody");
        nameField.setToolTipText("Your character's name");
        nameField.setName("nameField"); // NOI18N

        buttonGroup1.add(maleRadio);
        maleRadio.setText("Male");
        maleRadio.setName("maleRadio"); // NOI18N
        maleRadio.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                maleRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(femaleRadio);
        femaleRadio.setSelected(true);
        femaleRadio.setText("Female");
        femaleRadio.setName("femaleRadio"); // NOI18N
        femaleRadio.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                femaleRadioActionPerformed(evt);
            }
        });

        difficultyPanel.setBorder(BorderFactory.createTitledBorder("Difficulty"));
        difficultyPanel.setToolTipText("");
        difficultyPanel.setName("difficultyPanel"); // NOI18N

        buttonGroup2.add(normalDiffRadio);
        normalDiffRadio.setSelected(true);
        normalDiffRadio.setText("Normal");
        normalDiffRadio.setName("normalDiffRadio"); // NOI18N
        normalDiffRadio.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                normalDiffRadioActionPerformed(evt);
            }
        });

        buttonGroup2.add(hardDiffRadio);
        hardDiffRadio.setText("Hardcore");
        hardDiffRadio.setToolTipText("<html>\nTeacher never lets you pee<br>\nHarder to hold pee<br>\nYou may get caught holding pee<br>\n<i>Thirst</i> parameter\n</html>");
        hardDiffRadio.setName("hardDiffRadio"); // NOI18N

        GroupLayout difficultyPanelLayout = new GroupLayout(difficultyPanel);
        difficultyPanel.setLayout(difficultyPanelLayout);
        difficultyPanelLayout.setHorizontalGroup(difficultyPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(difficultyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(normalDiffRadio, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(100, 100, 100)
                .addComponent(hardDiffRadio)
                .addContainerGap())
        );
        difficultyPanelLayout.setVerticalGroup(difficultyPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(difficultyPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(normalDiffRadio)
                .addComponent(hardDiffRadio))
        );

        incontLabel.setText("Incontinence");
        incontLabel.setToolTipText("How incontinent are you?");
        incontLabel.setName("incontLabel"); // NOI18N

        incontSlider.setMinimum(5);
        incontSlider.setToolTipText("How incontinent are you?");
        incontSlider.setValue(10);
        incontSlider.setName("incontSlider"); // NOI18N

        bladAtStartLabel.setText("Bladder at start");
        bladAtStartLabel.setToolTipText("How much you have to pee on wake?");
        bladAtStartLabel.setName("bladAtStartLabel"); // NOI18N

        basSlider.setToolTipText("Defined value");
        basSlider.setValue(0);
        basSlider.setName("basSlider"); // NOI18N

        underwearLabel.setText("Underwear:");
        underwearLabel.setToolTipText("Select your underwear");
        underwearLabel.setName("underwearLabel"); // NOI18N

        outerwearLabel.setText("Outerwear:");
        outerwearLabel.setToolTipText("Select your outerwear");
        outerwearLabel.setName("outerwearLabel"); // NOI18N

        start.setFont(new Font("sansserif", 1, 12)); // NOI18N
        start.setText("Start");
        start.setToolTipText("Start new game");
        start.setName("start"); // NOI18N
        start.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                startActionPerformed(evt);
            }
        });

        nameLabel.setFont(new Font("sansserif", 1, 12)); // NOI18N
        nameLabel.setText("Name");
        nameLabel.setName("nameLabel"); // NOI18N

        buttonGroup3.add(definedBasRadio);
        definedBasRadio.setToolTipText("Defined value");
        definedBasRadio.setName("definedBasRadio"); // NOI18N
        definedBasRadio.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                definedBasRadioActionPerformed(evt);
            }
        });

        buttonGroup3.add(randomBasRadio);
        randomBasRadio.setSelected(true);
        randomBasRadio.setText("Random");
        randomBasRadio.setToolTipText("Random value between 0% and 100%");
        randomBasRadio.setName("randomBasRadio"); // NOI18N
        randomBasRadio.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                randomBasRadioActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("root");
        DefaultMutableTreeNode treeNode2 = new DefaultMutableTreeNode("Random");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Female");
        DefaultMutableTreeNode treeNode3 = new DefaultMutableTreeNode("Panties");
        DefaultMutableTreeNode treeNode4 = new DefaultMutableTreeNode("Strings");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Tanga panties");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Regular panties");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("\"Boy shorts\" panties");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Swimwear");
        treeNode4 = new DefaultMutableTreeNode("String bikini");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Regular bikini");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Swimsuit");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Diapers");
        treeNode4 = new DefaultMutableTreeNode("Light diaper");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Normal diaper");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Heavy diaper");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Menstrual pads");
        treeNode4 = new DefaultMutableTreeNode("Light pad");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Normal pad");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Big pad");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Male");
        treeNode3 = new DefaultMutableTreeNode("Pants");
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Shorts-alike pants");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Special");
        treeNode3 = new DefaultMutableTreeNode("Anti-gravity pants");
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Super-absorbing diaper");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("No underwear");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Custom");
        treeNode1.add(treeNode2);
        underwearTree.setModel(new DefaultTreeModel(treeNode1));
        underwearTree.setName("underwearTree"); // NOI18N
        underwearTree.setRootVisible(false);
        jScrollPane1.setViewportView(underwearTree);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        treeNode1 = new DefaultMutableTreeNode("root");
        treeNode2 = new DefaultMutableTreeNode("Random");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Female");
        treeNode3 = new DefaultMutableTreeNode("Jeans");
        treeNode4 = new DefaultMutableTreeNode("Long jeans");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Knee-length jeans");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Short jeans");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Very short jeans");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Trousers");
        treeNode4 = new DefaultMutableTreeNode("Long trousers");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Knee-length trousers");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Short trousers");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Very short trousers");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Skirts");
        treeNode4 = new DefaultMutableTreeNode("Long skirt");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Knee-length skirt");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Short skirt");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Mini skirt");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Micro skirt");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Long skirt and tights");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Knee-length skirt and tights");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Short skirt and tights");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Mini skirt and tights");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Micro skirt and tights");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Leggings");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Male");
        treeNode3 = new DefaultMutableTreeNode("Jeans");
        treeNode4 = new DefaultMutableTreeNode("Short male jeans");
        treeNode3.add(treeNode4);
        treeNode4 = new DefaultMutableTreeNode("Normal male jeans");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new DefaultMutableTreeNode("Male trousers");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("No outerwear");
        treeNode1.add(treeNode2);
        treeNode2 = new DefaultMutableTreeNode("Custom");
        treeNode1.add(treeNode2);
        outerwearTree.setModel(new DefaultTreeModel(treeNode1));
        outerwearTree.setName("outerwearTree"); // NOI18N
        outerwearTree.setRootVisible(false);
        jScrollPane2.setViewportView(outerwearTree);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new Font("Tahoma", 0, 12)); // NOI18N
        jTextPane1.setText("This program is thanks to the wonderful help of the following users:\nAnna May, FromRUSForum, and notwillnotcast of Omo.org, and two others (who choose to not be credited for differing reasons —\n                                            helping a ton, along with a few others helping with my minor mistakes!\n\nIf your (user)name is not here and you want it here, just shoot me a message and I'll add it post-haste!");
        jTextPane1.setName("creditsPane"); // NOI18N
        jScrollPane3.setViewportView(jTextPane1);

        undiesColor_black.setBackground(new Color(0, 0, 0));
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255)));
        undiesColor_black.setToolTipText("Black");
        undiesColor_black.setName("undiesColor_black"); // NOI18N
        undiesColor_black.setPreferredSize(new Dimension(20, 20));
        undiesColor_black.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_blackMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_blackLayout = new GroupLayout(undiesColor_black);
        undiesColor_black.setLayout(undiesColor_blackLayout);
        undiesColor_blackLayout.setHorizontalGroup(undiesColor_blackLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_blackLayout.setVerticalGroup(undiesColor_blackLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_gray.setBackground(new Color(153, 153, 153));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_gray.setToolTipText("Gray");
        undiesColor_gray.setName("undiesColor_gray"); // NOI18N
        undiesColor_gray.setPreferredSize(new Dimension(20, 20));
        undiesColor_gray.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_grayMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_grayLayout = new GroupLayout(undiesColor_gray);
        undiesColor_gray.setLayout(undiesColor_grayLayout);
        undiesColor_grayLayout.setHorizontalGroup(undiesColor_grayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_grayLayout.setVerticalGroup(undiesColor_grayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_red.setBackground(new Color(255, 0, 0));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_red.setToolTipText("Red");
        undiesColor_red.setName("undiesColor_red"); // NOI18N
        undiesColor_red.setPreferredSize(new Dimension(20, 20));
        undiesColor_red.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_redMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_redLayout = new GroupLayout(undiesColor_red);
        undiesColor_red.setLayout(undiesColor_redLayout);
        undiesColor_redLayout.setHorizontalGroup(undiesColor_redLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_redLayout.setVerticalGroup(undiesColor_redLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_orange.setBackground(new Color(255, 153, 0));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_orange.setToolTipText("Orange");
        undiesColor_orange.setName("undiesColor_orange"); // NOI18N
        undiesColor_orange.setPreferredSize(new Dimension(20, 20));
        undiesColor_orange.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_orangeMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_orangeLayout = new GroupLayout(undiesColor_orange);
        undiesColor_orange.setLayout(undiesColor_orangeLayout);
        undiesColor_orangeLayout.setHorizontalGroup(undiesColor_orangeLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_orangeLayout.setVerticalGroup(undiesColor_orangeLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_yellow.setBackground(new Color(255, 255, 0));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_yellow.setToolTipText("Yellow");
        undiesColor_yellow.setName("undiesColor_yellow"); // NOI18N
        undiesColor_yellow.setPreferredSize(new Dimension(20, 20));
        undiesColor_yellow.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_yellowMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_yellowLayout = new GroupLayout(undiesColor_yellow);
        undiesColor_yellow.setLayout(undiesColor_yellowLayout);
        undiesColor_yellowLayout.setHorizontalGroup(undiesColor_yellowLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_yellowLayout.setVerticalGroup(undiesColor_yellowLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_green.setBackground(new Color(0, 255, 0));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_green.setToolTipText("Green");
        undiesColor_green.setName("undiesColor_green"); // NOI18N
        undiesColor_green.setPreferredSize(new Dimension(20, 20));
        undiesColor_green.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_greenMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_greenLayout = new GroupLayout(undiesColor_green);
        undiesColor_green.setLayout(undiesColor_greenLayout);
        undiesColor_greenLayout.setHorizontalGroup(undiesColor_greenLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_greenLayout.setVerticalGroup(undiesColor_greenLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_blue.setBackground(new Color(0, 255, 204));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_blue.setToolTipText("Blue");
        undiesColor_blue.setName("undiesColor_blue"); // NOI18N
        undiesColor_blue.setPreferredSize(new Dimension(20, 20));
        undiesColor_blue.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_blueMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_blueLayout = new GroupLayout(undiesColor_blue);
        undiesColor_blue.setLayout(undiesColor_blueLayout);
        undiesColor_blueLayout.setHorizontalGroup(undiesColor_blueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_blueLayout.setVerticalGroup(undiesColor_blueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_darkBlue.setBackground(new Color(0, 0, 204));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_darkBlue.setToolTipText("Dark blue");
        undiesColor_darkBlue.setName("undiesColor_darkBlue"); // NOI18N
        undiesColor_darkBlue.setPreferredSize(new Dimension(20, 20));
        undiesColor_darkBlue.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_darkBlueMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_darkBlueLayout = new GroupLayout(undiesColor_darkBlue);
        undiesColor_darkBlue.setLayout(undiesColor_darkBlueLayout);
        undiesColor_darkBlueLayout.setHorizontalGroup(undiesColor_darkBlueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_darkBlueLayout.setVerticalGroup(undiesColor_darkBlueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_purple.setBackground(new Color(153, 0, 153));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_purple.setToolTipText("Purple");
        undiesColor_purple.setName("undiesColor_purple"); // NOI18N
        undiesColor_purple.setPreferredSize(new Dimension(20, 20));
        undiesColor_purple.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_purpleMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_purpleLayout = new GroupLayout(undiesColor_purple);
        undiesColor_purple.setLayout(undiesColor_purpleLayout);
        undiesColor_purpleLayout.setHorizontalGroup(undiesColor_purpleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_purpleLayout.setVerticalGroup(undiesColor_purpleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_pink.setBackground(new Color(255, 51, 255));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        undiesColor_pink.setToolTipText("Pink");
        undiesColor_pink.setName("undiesColor_pink"); // NOI18N
        undiesColor_pink.setPreferredSize(new Dimension(20, 20));
        undiesColor_pink.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_pinkMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_pinkLayout = new GroupLayout(undiesColor_pink);
        undiesColor_pink.setLayout(undiesColor_pinkLayout);
        undiesColor_pinkLayout.setHorizontalGroup(undiesColor_pinkLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        undiesColor_pinkLayout.setVerticalGroup(undiesColor_pinkLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_pink.setBackground(new Color(255, 51, 255));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_pink.setToolTipText("Pink");
        lowerColor_pink.setName("lowerColor_pink"); // NOI18N
        lowerColor_pink.setPreferredSize(new Dimension(20, 20));
        lowerColor_pink.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_pinkMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_pinkLayout = new GroupLayout(lowerColor_pink);
        lowerColor_pink.setLayout(lowerColor_pinkLayout);
        lowerColor_pinkLayout.setHorizontalGroup(lowerColor_pinkLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_pinkLayout.setVerticalGroup(lowerColor_pinkLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_black.setBackground(new Color(0, 0, 0));
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255)));
        lowerColor_black.setToolTipText("Black");
        lowerColor_black.setName("lowerColor_black"); // NOI18N
        lowerColor_black.setPreferredSize(new Dimension(20, 20));
        lowerColor_black.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_blackMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_blackLayout = new GroupLayout(lowerColor_black);
        lowerColor_black.setLayout(lowerColor_blackLayout);
        lowerColor_blackLayout.setHorizontalGroup(lowerColor_blackLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_blackLayout.setVerticalGroup(lowerColor_blackLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_gray.setBackground(new Color(153, 153, 153));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_gray.setToolTipText("Gray");
        lowerColor_gray.setName("lowerColor_gray"); // NOI18N
        lowerColor_gray.setPreferredSize(new Dimension(20, 20));
        lowerColor_gray.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_grayMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_grayLayout = new GroupLayout(lowerColor_gray);
        lowerColor_gray.setLayout(lowerColor_grayLayout);
        lowerColor_grayLayout.setHorizontalGroup(lowerColor_grayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_grayLayout.setVerticalGroup(lowerColor_grayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_red.setBackground(new Color(255, 0, 0));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_red.setToolTipText("Red");
        lowerColor_red.setName("lowerColor_red"); // NOI18N
        lowerColor_red.setPreferredSize(new Dimension(20, 20));
        lowerColor_red.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_redMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_redLayout = new GroupLayout(lowerColor_red);
        lowerColor_red.setLayout(lowerColor_redLayout);
        lowerColor_redLayout.setHorizontalGroup(lowerColor_redLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_redLayout.setVerticalGroup(lowerColor_redLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_orange.setBackground(new Color(255, 153, 0));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_orange.setToolTipText("Orange");
        lowerColor_orange.setName("lowerColor_orange"); // NOI18N
        lowerColor_orange.setPreferredSize(new Dimension(20, 20));
        lowerColor_orange.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_orangeMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_orangeLayout = new GroupLayout(lowerColor_orange);
        lowerColor_orange.setLayout(lowerColor_orangeLayout);
        lowerColor_orangeLayout.setHorizontalGroup(lowerColor_orangeLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_orangeLayout.setVerticalGroup(lowerColor_orangeLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_yellow.setBackground(new Color(255, 255, 0));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_yellow.setToolTipText("Yellow");
        lowerColor_yellow.setName("lowerColor_yellow"); // NOI18N
        lowerColor_yellow.setPreferredSize(new Dimension(20, 20));
        lowerColor_yellow.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_yellowMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_yellowLayout = new GroupLayout(lowerColor_yellow);
        lowerColor_yellow.setLayout(lowerColor_yellowLayout);
        lowerColor_yellowLayout.setHorizontalGroup(lowerColor_yellowLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_yellowLayout.setVerticalGroup(lowerColor_yellowLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_green.setBackground(new Color(0, 255, 0));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_green.setToolTipText("Green");
        lowerColor_green.setName("lowerColor_green"); // NOI18N
        lowerColor_green.setPreferredSize(new Dimension(20, 20));
        lowerColor_green.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_greenMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_greenLayout = new GroupLayout(lowerColor_green);
        lowerColor_green.setLayout(lowerColor_greenLayout);
        lowerColor_greenLayout.setHorizontalGroup(lowerColor_greenLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_greenLayout.setVerticalGroup(lowerColor_greenLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_blue.setBackground(new Color(0, 255, 204));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_blue.setToolTipText("Blue");
        lowerColor_blue.setName("lowerColor_blue"); // NOI18N
        lowerColor_blue.setPreferredSize(new Dimension(20, 20));
        lowerColor_blue.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_blueMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_blueLayout = new GroupLayout(lowerColor_blue);
        lowerColor_blue.setLayout(lowerColor_blueLayout);
        lowerColor_blueLayout.setHorizontalGroup(lowerColor_blueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_blueLayout.setVerticalGroup(lowerColor_blueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_darkBlue.setBackground(new Color(0, 0, 204));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_darkBlue.setToolTipText("Dark blue");
        lowerColor_darkBlue.setName("lowerColor_darkBlue"); // NOI18N
        lowerColor_darkBlue.setPreferredSize(new Dimension(20, 20));
        lowerColor_darkBlue.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_darkBlueMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_darkBlueLayout = new GroupLayout(lowerColor_darkBlue);
        lowerColor_darkBlue.setLayout(lowerColor_darkBlueLayout);
        lowerColor_darkBlueLayout.setHorizontalGroup(lowerColor_darkBlueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_darkBlueLayout.setVerticalGroup(lowerColor_darkBlueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        lowerColor_purple.setBackground(new Color(153, 0, 153));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        lowerColor_purple.setToolTipText("Purple");
        lowerColor_purple.setName("lowerColor_purple"); // NOI18N
        lowerColor_purple.setPreferredSize(new Dimension(20, 20));
        lowerColor_purple.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_purpleMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_purpleLayout = new GroupLayout(lowerColor_purple);
        lowerColor_purple.setLayout(lowerColor_purpleLayout);
        lowerColor_purpleLayout.setHorizontalGroup(lowerColor_purpleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        lowerColor_purpleLayout.setVerticalGroup(lowerColor_purpleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        undiesColor_random.setBackground(new Color(204, 204, 204));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));
        undiesColor_random.setToolTipText("Random");
        undiesColor_random.setName("undiesColor_random"); // NOI18N
        undiesColor_random.setPreferredSize(new Dimension(20, 20));
        undiesColor_random.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                undiesColor_randomMouseClicked(evt);
            }
        });

        GroupLayout undiesColor_randomLayout = new GroupLayout(undiesColor_random);
        undiesColor_random.setLayout(undiesColor_randomLayout);
        undiesColor_randomLayout.setHorizontalGroup(undiesColor_randomLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        undiesColor_randomLayout.setVerticalGroup(undiesColor_randomLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        lowerColor_random.setBackground(new Color(204, 204, 204));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));
        lowerColor_random.setToolTipText("Random");
        lowerColor_random.setName("lowerColor_random"); // NOI18N
        lowerColor_random.setPreferredSize(new Dimension(20, 20));
        lowerColor_random.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                lowerColor_randomMouseClicked(evt);
            }
        });

        GroupLayout lowerColor_randomLayout = new GroupLayout(lowerColor_random);
        lowerColor_random.setLayout(lowerColor_randomLayout);
        lowerColor_randomLayout.setHorizontalGroup(lowerColor_randomLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        lowerColor_randomLayout.setVerticalGroup(lowerColor_randomLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        wearEditorButton.setText("Wear editor");
        wearEditorButton.setToolTipText("Create your own wear and use it in game.");
        wearEditorButton.setName("wearEditorButton"); // NOI18N
        wearEditorButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                wearEditorButtonActionPerformed(evt);
            }
        });

        loadGame.setText("Load game...");
        loadGame.setToolTipText("Load a paused game");
        loadGame.setName("loadGame"); // NOI18N
        loadGame.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                loadGameActionPerformed(evt);
            }
        });

        loadPreset.setText("Load preset");
        loadPreset.setName("loadPreset"); // NOI18N
        loadPreset.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                loadPresetActionPerformed(evt);
            }
        });

        savePreset.setText("Save preset");
        savePreset.setName("savePreset"); // NOI18N
        savePreset.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                savePresetActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(nameField)
                                            .addComponent(difficultyPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane1, GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(nameLabel)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(5, 5, 5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(underwearLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(undiesColor_black, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_gray, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_red, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_orange, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_yellow, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_green, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_blue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_darkBlue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_purple, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(undiesColor_pink, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(undiesColor_random, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(definedBasRadio)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(basSlider, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(randomBasRadio))
                                    .addComponent(jScrollPane2)
                                    .addComponent(incontSlider, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(femaleRadio)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(maleRadio))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(outerwearLabel)
                                            .addComponent(incontLabel)
                                            .addComponent(bladAtStartLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lowerColor_black, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_gray, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_red, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_orange, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_yellow, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_green, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_blue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_darkBlue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_purple, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lowerColor_pink, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lowerColor_random, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadGame, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(start, GroupLayout.PREFERRED_SIZE, 455, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wearEditorButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(loadPreset)
                            .addComponent(savePreset)))))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addGap(8, 8, 8)
                        .addComponent(nameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(difficultyPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(underwearLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(femaleRadio)
                            .addComponent(maleRadio))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bladAtStartLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(basSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(definedBasRadio)
                            .addComponent(randomBasRadio))
                        .addGap(8, 8, 8)
                        .addComponent(incontLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(incontSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outerwearLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(undiesColor_black, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_gray, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_red, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_orange, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_green, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_blue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_darkBlue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_purple, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_pink, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_yellow, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_black, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_gray, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_red, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_orange, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_green, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_blue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_darkBlue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_purple, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_pink, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_yellow, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(undiesColor_random, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerColor_random, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadPreset, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(savePreset, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(start, GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addComponent(wearEditorButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadGame, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }//GEN-END:initComponents

    @SuppressWarnings("ResultOfObjectAllocationIgnored")
    private void startActionPerformed(ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        Gender gnd = Gender.MALE;
        int bas;
        Random rnd = new Random();
        boolean diff = false;
        String underwearToAssign = "Random";
        String outerwearToAssign = "Random";

        if (femaleRadio.isSelected())
        {
            gnd = Gender.FEMALE;
        }

        if (definedBasRadio.isSelected())
        {
            bas = basSlider.getValue();
        }
        else
        {
            bas = rnd.nextInt(51);
        }

        if (hardDiffRadio.isSelected())
        {
            diff = true;
        }

        float incont = incontSlider.getValue() / 10;
        if (incont < 1)
        {
            incont += 0.5;
        }

        try
        {
            System.out.println(underwearTree.getLastSelectedPathComponent().toString());
        }
        catch (NullPointerException e)
        {
            System.out.println("null");
        }

        try
        {
            System.out.println(outerwearTree.getLastSelectedPathComponent().toString());
        }
        catch (NullPointerException e)
        {
            System.out.println("null");
        }

        try
        {
            System.out.println(lowerColor);
        }
        catch (NullPointerException e)
        {
            System.out.println("null");
        }

        try
        {
            System.out.println(undiesColor);
        }
        catch (NullPointerException e)
        {
            System.out.println("null");
        }

        if (underwearTree.getLastSelectedPathComponent() != null)
        {
            underwearToAssign = underwearTree.getLastSelectedPathComponent().toString();
        }
        if (outerwearTree.getLastSelectedPathComponent() != null)
        {
            outerwearToAssign = outerwearTree.getLastSelectedPathComponent().toString();
        }

//        try {
//            switch (underwearTree.getLastSelectedPathComponent().toString()) {
//                case "Female":
//                case "Male":
//                case "Special":
//                case "Panties":
//                case "Swimwear":
//                case "Diapers":
//                case "Menstrual pads":
//                    
//                    break;
//                default:
//                    switch (outerwearTree.getLastSelectedPathComponent().toString()) {
//                        case "Male":
//                        case "Female":
//                        case "Jeans":
//                        case "Trousers":
//                        case "Skirts":
//                            break;
//                        default:
        new ALongHourAndAHalf(nameField.getText(),
                gnd,
                diff,
                incont, (short) bas,
                underwearToAssign,
                outerwearToAssign,
                undiesColor,
                lowerColor);
        this.dispose();
//                    }
//            }
//        } catch (NullPointerException e) {
//            System.err.println("Duh");
//        }
    }//GEN-LAST:event_startActionPerformed

    private void definedBasRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_definedBasRadioActionPerformed

    }//GEN-LAST:event_definedBasRadioActionPerformed

    private void normalDiffRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_normalDiffRadioActionPerformed

    }//GEN-LAST:event_normalDiffRadioActionPerformed

    private void randomBasRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_randomBasRadioActionPerformed

    }//GEN-LAST:event_randomBasRadioActionPerformed

    private void maleRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_maleRadioActionPerformed
        if (nameField.getText().equals("Mrs. Nobody"))
        {
            nameField.setText("Mr. Nobody");
        }
    }//GEN-LAST:event_maleRadioActionPerformed

    private void femaleRadioActionPerformed(ActionEvent evt) {//GEN-FIRST:event_femaleRadioActionPerformed
        if (nameField.getText().equals("Mr. Nobody"))
        {
            nameField.setText("Mrs. Nobody");
        }
    }//GEN-LAST:event_femaleRadioActionPerformed

    private void undiesColor_blackMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_blackMouseClicked
    {//GEN-HEADEREND:event_undiesColor_blackMouseClicked
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 3));

        //Unchecking other colors
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Black";
    }//GEN-LAST:event_undiesColor_blackMouseClicked

    private void undiesColor_grayMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_grayMouseClicked
    {//GEN-HEADEREND:event_undiesColor_grayMouseClicked
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Gray";
    }//GEN-LAST:event_undiesColor_grayMouseClicked

    private void undiesColor_redMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_redMouseClicked
    {//GEN-HEADEREND:event_undiesColor_redMouseClicked
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Red";
    }//GEN-LAST:event_undiesColor_redMouseClicked

    private void undiesColor_orangeMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_orangeMouseClicked
    {//GEN-HEADEREND:event_undiesColor_orangeMouseClicked
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Orange";
    }//GEN-LAST:event_undiesColor_orangeMouseClicked

    private void undiesColor_yellowMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_yellowMouseClicked
    {//GEN-HEADEREND:event_undiesColor_yellowMouseClicked
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Yellow";
    }//GEN-LAST:event_undiesColor_yellowMouseClicked

    private void undiesColor_greenMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_greenMouseClicked
    {//GEN-HEADEREND:event_undiesColor_greenMouseClicked
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Green";
    }//GEN-LAST:event_undiesColor_greenMouseClicked

    private void undiesColor_blueMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_blueMouseClicked
    {//GEN-HEADEREND:event_undiesColor_blueMouseClicked
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Blue";
    }//GEN-LAST:event_undiesColor_blueMouseClicked

    private void undiesColor_darkBlueMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_darkBlueMouseClicked
    {//GEN-HEADEREND:event_undiesColor_darkBlueMouseClicked
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Dark blue";
    }//GEN-LAST:event_undiesColor_darkBlueMouseClicked

    private void undiesColor_purpleMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_purpleMouseClicked
    {//GEN-HEADEREND:event_undiesColor_purpleMouseClicked
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Purple";
    }//GEN-LAST:event_undiesColor_purpleMouseClicked

    private void undiesColor_pinkMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_pinkMouseClicked
    {//GEN-HEADEREND:event_undiesColor_pinkMouseClicked
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Pink";
    }//GEN-LAST:event_undiesColor_pinkMouseClicked

    private void lowerColor_pinkMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_pinkMouseClicked
    {//GEN-HEADEREND:event_lowerColor_pinkMouseClicked
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Pink";
    }//GEN-LAST:event_lowerColor_pinkMouseClicked

    private void lowerColor_blackMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_blackMouseClicked
    {//GEN-HEADEREND:event_lowerColor_blackMouseClicked
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 3));

        //Unchecking other colors
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Black";
    }//GEN-LAST:event_lowerColor_blackMouseClicked

    private void lowerColor_grayMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_grayMouseClicked
    {//GEN-HEADEREND:event_lowerColor_grayMouseClicked
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Gray";
    }//GEN-LAST:event_lowerColor_grayMouseClicked

    private void lowerColor_redMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_redMouseClicked
    {//GEN-HEADEREND:event_lowerColor_redMouseClicked
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Red";
    }//GEN-LAST:event_lowerColor_redMouseClicked

    private void lowerColor_orangeMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_orangeMouseClicked
    {//GEN-HEADEREND:event_lowerColor_orangeMouseClicked
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Orange";
    }//GEN-LAST:event_lowerColor_orangeMouseClicked

    private void lowerColor_yellowMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_yellowMouseClicked
    {//GEN-HEADEREND:event_lowerColor_yellowMouseClicked
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Yellow";
    }//GEN-LAST:event_lowerColor_yellowMouseClicked

    private void lowerColor_greenMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_greenMouseClicked
    {//GEN-HEADEREND:event_lowerColor_greenMouseClicked
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Green";
    }//GEN-LAST:event_lowerColor_greenMouseClicked

    private void lowerColor_blueMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_blueMouseClicked
    {//GEN-HEADEREND:event_lowerColor_blueMouseClicked
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Blue";
    }//GEN-LAST:event_lowerColor_blueMouseClicked

    private void lowerColor_darkBlueMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_darkBlueMouseClicked
    {//GEN-HEADEREND:event_lowerColor_darkBlueMouseClicked
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Dark blue";
    }//GEN-LAST:event_lowerColor_darkBlueMouseClicked

    private void lowerColor_purpleMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_purpleMouseClicked
    {//GEN-HEADEREND:event_lowerColor_purpleMouseClicked
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Purple";
    }//GEN-LAST:event_lowerColor_purpleMouseClicked

    private void undiesColor_randomMouseClicked(MouseEvent evt)//GEN-FIRST:event_undiesColor_randomMouseClicked
    {//GEN-HEADEREND:event_undiesColor_randomMouseClicked
        undiesColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        undiesColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        undiesColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        undiesColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        undiesColor = "Random";
    }//GEN-LAST:event_undiesColor_randomMouseClicked

    private void lowerColor_randomMouseClicked(MouseEvent evt)//GEN-FIRST:event_lowerColor_randomMouseClicked
    {//GEN-HEADEREND:event_lowerColor_randomMouseClicked
        lowerColor_random.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 3));

        //Unchecking other colors
        lowerColor_black.setBorder(BorderFactory.createLineBorder(new Color(255, 255, 255), 1));
        lowerColor_red.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_orange.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_yellow.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_green.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_blue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_darkBlue.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_gray.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_pink.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));
        lowerColor_purple.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0), 1));

        lowerColor = "Random";
    }//GEN-LAST:event_lowerColor_randomMouseClicked

    private void wearEditorButtonActionPerformed(ActionEvent evt)//GEN-FIRST:event_wearEditorButtonActionPerformed
    {//GEN-HEADEREND:event_wearEditorButtonActionPerformed
        WearEditor.main(new String[0]);
    }//GEN-LAST:event_wearEditorButtonActionPerformed

    private void wearEditorActionPerformed(ActionEvent evt)//GEN-FIRST:event_wearEditorActionPerformed
    {//GEN-HEADEREND:event_wearEditorActionPerformed

    }//GEN-LAST:event_wearEditorActionPerformed

    private void loadGameButtonActionPerformed(ActionEvent evt)//GEN-FIRST:event_loadGameButtonActionPerformed
    {//GEN-HEADEREND:event_loadGameButtonActionPerformed

    }//GEN-LAST:event_loadGameButtonActionPerformed

    @SuppressWarnings("ResultOfObjectAllocationIgnored")
    private void loadGameActionPerformed(ActionEvent evt)//GEN-FIRST:event_loadGameActionPerformed
    {//GEN-HEADEREND:event_loadGameActionPerformed
        if (fcGame.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = fcGame.getSelectedFile();
            try
            {
                FileInputStream fin = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fin);
                Save save = (Save) ois.readObject();
                new ALongHourAndAHalf(save);
                dispose();
            }
            catch (IOException | ClassNotFoundException e)
            {
                JOptionPane.showMessageDialog(this, "File error.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_loadGameActionPerformed

    private void savePresetActionPerformed(ActionEvent evt)//GEN-FIRST:event_savePresetActionPerformed
    {//GEN-HEADEREND:event_savePresetActionPerformed
        
    }//GEN-LAST:event_savePresetActionPerformed

    private void loadPresetActionPerformed(ActionEvent evt)//GEN-FIRST:event_loadPresetActionPerformed
    {//GEN-HEADEREND:event_loadPresetActionPerformed
        if (fcPreset.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = fcPreset.getSelectedFile();
            try
            {
                FileInputStream fin = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fin);
                CharacterPreset save = (CharacterPreset) ois.readObject();
                nameField.setText(save.name);
                normalDiffRadio.setSelected(!save.hardcore);
                hardDiffRadio.setSelected(save.hardcore);
                femaleRadio.setSelected(save.gender == FEMALE);
                maleRadio.setSelected(save.gender == MALE);
                randomBasRadio.setSelected(save.randomBladder);
                definedBasRadio.setSelected(!save.randomBladder);
                basSlider.setValue(save.bladderAtStart);
                incontSlider.setValue(save.incontinence);
                underwearTree.setSelectionPath(save.underwearSelectionPath);
                outerwearTree.setSelectionPath(save.outerwearSelectionPath);
                switch(save.underwearColor)
                {
                    case "Black":
                        undiesColor_blackMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Gray":
                        undiesColor_grayMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Red":
                        undiesColor_redMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Orange":
                        undiesColor_orangeMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Yellow":
                        undiesColor_yellowMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Green":
                        undiesColor_greenMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Blue":
                        undiesColor_blueMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Dark blue":
                        undiesColor_darkBlueMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Purple":
                        undiesColor_purpleMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Pink":
                        undiesColor_pinkMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Random":
                        undiesColor_randomMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                }
                
                switch(save.outerwearColor)
                {
                    case "Black":
                        lowerColor_blackMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Gray":
                        lowerColor_grayMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Red":
                        lowerColor_redMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Orange":
                        lowerColor_orangeMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Yellow":
                        lowerColor_yellowMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Green":
                        lowerColor_greenMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Blue":
                        lowerColor_blueMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Dark blue":
                        lowerColor_darkBlueMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Purple":
                        lowerColor_purpleMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Pink":
                        lowerColor_pinkMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                    case "Random":
                        lowerColor_randomMouseClicked(new MouseEvent(new Component(){private static final long serialVersionUID = 1L;
                }, 0, 0, 0, 0, 0, 0, false));
                        break;
                }
            }
            catch (IOException | ClassNotFoundException e)
            {
                JOptionPane.showMessageDialog(this, "File error.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_loadPresetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(setupFramePre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new setupFramePre().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JSlider basSlider;
    private JLabel bladAtStartLabel;
    private ButtonGroup buttonGroup1;
    private ButtonGroup buttonGroup2;
    private ButtonGroup buttonGroup3;
    private JRadioButton definedBasRadio;
    private JPanel difficultyPanel;
    private JRadioButton femaleRadio;
    private JRadioButton hardDiffRadio;
    private JLabel incontLabel;
    private JSlider incontSlider;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTextPane jTextPane1;
    private JButton loadGame;
    private JButton loadPreset;
    private JPanel lowerColor_black;
    private JPanel lowerColor_blue;
    private JPanel lowerColor_darkBlue;
    private JPanel lowerColor_gray;
    private JPanel lowerColor_green;
    private JPanel lowerColor_orange;
    private JPanel lowerColor_pink;
    private JPanel lowerColor_purple;
    private JPanel lowerColor_random;
    private JPanel lowerColor_red;
    private JPanel lowerColor_yellow;
    private JRadioButton maleRadio;
    private JTextField nameField;
    private JLabel nameLabel;
    private JRadioButton normalDiffRadio;
    private JLabel outerwearLabel;
    private JTree outerwearTree;
    private JRadioButton randomBasRadio;
    private JButton savePreset;
    private JButton start;
    private JLabel underwearLabel;
    private JTree underwearTree;
    private JPanel undiesColor_black;
    private JPanel undiesColor_blue;
    private JPanel undiesColor_darkBlue;
    private JPanel undiesColor_gray;
    private JPanel undiesColor_green;
    private JPanel undiesColor_orange;
    private JPanel undiesColor_pink;
    private JPanel undiesColor_purple;
    private JPanel undiesColor_random;
    private JPanel undiesColor_red;
    private JPanel undiesColor_yellow;
    private JButton wearEditorButton;
    // End of variables declaration//GEN-END:variables

    private static class CharacterPreset implements Serializable
    {
        private static final long serialVersionUID = 1L;

        String name;
        boolean hardcore;
        Gender gender;
        boolean randomBladder;
        short bladderAtStart;
        short incontinence;
        TreePath underwearSelectionPath;
        TreePath outerwearSelectionPath;
        String underwearColor;
        String outerwearColor;

        CharacterPreset(String name, boolean hardcore, Gender gender, boolean randomBladder, short bladderAtStart, short incontinence, TreePath underwear, TreePath outerwear, String underwearColor, String outerwearColor)
        {
            this.name = name;
            this.hardcore = hardcore;
            this.gender = gender;
            this.randomBladder = randomBladder;
            this.bladderAtStart = bladderAtStart;
            this.incontinence = incontinence;
            this.underwearSelectionPath = underwear;
            this.outerwearSelectionPath = outerwear;
            this.underwearColor = underwearColor;
            this.outerwearColor = outerwearColor;
        }
    }
}
